export function css(...stylesheets) {
    return stylesheets
        .map((stylesheet) => {
        if (typeof stylesheet === 'string') {
            return stylesheet.trim();
        }
        return Object.entries(stylesheet)
            .filter((entry) => entry.every(Boolean))
            .map((entry) => entry.join(':'))
            .join(';')
            .replace(/([A-Z])/g, (word) => '-' + word.toLowerCase());
    })
        .join(';').trim();
}
export function classNames(...args) {
    return args
        .filter((o) => o)
        .map((o) => {
        if (typeof o === 'string') {
            return o.trim();
        }
        return Array.from(Object.entries(o))
            .map(([e1, e2]) => {
            if (e2) {
                if (typeof e2 === 'boolean') {
                    return e1;
                }
                return `${e2?.trim()} ${e1}`;
            }
            return '';
        })
            .filter((o) => o)
            .join(' ')
            .trim();
    })
        .filter((o) => o)
        .join(' ')
        .trim();
}
export function renameProps({ wrap: flexWrap, basis: flexBasis, grow: flexGrow, shrink: flexShrink, colStart: gridColumnStart, colEnd: gridColumnEnd, rowStart: gridRowStart, rowEnd: gridRowEnd, col: gridColumn, row: gridRow, area: gridArea, autoCols: gridAutoColumns, autoRows: gridAutoRows, autoFlow: gridAutoFlow, colGap: gridColumnGap, rowGap: gridRowGap, templateAreas: gridTemplateAreas, templateCols: gridTemplateColumns, templateRows: gridTemplateRows, ...rest }) {
    return {
        ...rest,
        flexWrap,
        flexBasis,
        flexGrow,
        flexShrink,
        gridColumnStart,
        gridColumnEnd,
        gridRowStart,
        gridRowEnd,
        gridColumn,
        gridRow,
        gridArea,
        gridAutoColumns,
        gridAutoRows,
        gridAutoFlow,
        gridColumnGap,
        gridRowGap,
        gridTemplateAreas,
        gridTemplateColumns,
        gridTemplateRows
    };
}
